function createCalendarEventsFromEmails() {
  // 1. Настройки
  const senderEmails = ["noreplay@github.com", "1234567890@gmail.com"]; // Ваши отправители
  const label = "in:inbox is:unread"; // Фильтр писем
  const mskTimeZone = "Europe/Moscow"; // Часовой пояс
  const calendar = CalendarApp.getDefaultCalendar(); // Основной календарь
  
  // 2. Получаем письма
  const threads = GmailApp.search(label);
  
  // 3. Загружаем существующие события (за последние 7 дней)
  const now = new Date();
  const existingEvents = calendar.getEvents(
    new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000), // 7 дней назад
    new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000)  // 2 дня вперед
  );
  
  // 4. Обрабатываем письма
  for (const thread of threads) {
    const messages = thread.getMessages();
    for (const message of messages) {
      const from = message.getFrom();
      if (!senderEmails.some(email => from.includes(email))) continue;

      const subject = message.getSubject() || "Без темы";
      const messageId = message.getId(); // Уникальный ID письма
      const link = "https://mail.google.com/mail/u/0/#inbox/" + messageId;
      const emailDate = new Date(message.getDate());
      
      // 5. Проверяем дубликаты (по ID в описании)
      const isDuplicate = existingEvents.some(event => {
        return event.getDescription()?.includes(`MessageID: ${messageId}`);
      });
      if (isDuplicate) {
        Logger.log(`Пропускаем дубликат для письма ${messageId}`);
        continue;
      }

      // 6. Подготавливаем текст письма
      const bodyText = message.getPlainBody()
        .replace(/\r\n/g, '\n') // Нормализуем переносы строк
        .substring(0, 500)      // Берем первые 500 символов
        .trim();
      
      // 7. Формируем описание события
      const description = `
### AUTOGENERATED ###
MessageID: ${messageId}
Ссылка: ${link}
Отправитель: ${from}

Текст письма:
${bodyText}${bodyText.length >= 500 ? '...' : ''}
`.trim();

      // 8. Рассчитываем время события
      const {startTime, endTime} = calculateEventTimes(emailDate, mskTimeZone);
      
      // 9. Создаем событие
      try {
        const event = calendar.createEvent(
          `Письмо: ${subject.substring(0, 50)}`, // Заголовок
          startTime,
          endTime,
          {
            description: description,
            location: "Gmail"
          }
        );
        
        Logger.log(`Создано: "${subject}" на ${startTime.toLocaleString()}`);
      } catch (e) {
        Logger.log(`Ошибка для "${subject}": ${e}`);
      }
    }
  }
}

// Расчет времени события
function calculateEventTimes(emailDate, timeZone) {
  const mskDate = new Date(emailDate.toLocaleString("en-US", {timeZone}));
  const startTime = new Date(mskDate);
  const endTime = new Date(mskDate);
  const hours = mskDate.getHours();

  // Логика времени:
  if (hours >= 22 || hours < 8) { // Ночное время
    startTime.setDate(startTime.getDate() + (hours >= 22 ? 1 : 0));
    startTime.setHours(8, 0, 0); // 8:00 утра
    endTime.setTime(startTime.getTime() + 30 * 60 * 1000); // +30 мин
  } else { // Дневное время
    startTime.setMinutes(startTime.getMinutes() + 30); // +30 мин к времени письма
    endTime.setTime(startTime.getTime() + 30 * 60 * 1000);
  }

  return {startTime, endTime};
}